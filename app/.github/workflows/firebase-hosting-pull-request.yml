# This file was auto-generated by the Firebase CLI
# https://github.com/firebase/firebase-tools (firebase init hosting:github)

name: Preview Channel

on:
  workflow_call:
    secrets:
      GCP_SA_KEY:
        required: true

env:
  # required by the app build to determine py_backend URL
  ENV: ${{ vars.ENV }}
  GOOGLE_CLOUD_PROJECT: ${{ vars.GOOGLE_CLOUD_PROJECT }}
  PABOLO_PROJECT_ID: ${{ vars.GOOGLE_CLOUD_PROJECT }}
  # see vite.config.ts for the list of env variables required by the app
  PABOLO_APP_API_KEY: ${{ vars.APP_API_KEY }}
  PABOLO_APP_AUTH_DOMAIN: ${{ vars.APP_AUTH_DOMAIN }}
  PABOLO_APP_MESSAGING_SENDER_ID: ${{ vars.APP_MESSAGING_SENDER_ID }}
  PABOLO_APP_ID: ${{ vars.APP_ID }}
  PABOLO_BUCKET_NAME_ASSET_STORAGE: ${{ vars.BUCKET_ASSET }}
  BUCKET_FIREBASE: ${{ vars.BUCKET_FIREBASE }}
  PABOLO_TOPIC_GCP_PROJECT: ${{ vars.TOPIC_GCP_PROJECT }}
  PABOLO_TOPIC_RESPONSE_VIDEOGEN: ${{ vars.TOPIC_RESPONSE_VIDEOGEN }}
  PABOLO_BUCKET_NAME_MEDIA_STORAGE: ${{ vars.BUCKET_MEDIA }}
  PABOLO_BUCKET_NAME_MUSIC_STORAGE: ${{ vars.BUCKET_MUSICDB }}
  PABOLO_BUCKET_NAME_PUBLIC_STORAGE: ${{ vars.BUCKET_PUBLIC }}
  PABOLO_BUCKET_NAME_SOUND_STORAGE: ${{ vars.BUCKET_SOUND }}
  PABOLO_BUCKET_NAME_VOICE_STORAGE: ${{ vars.BUCKET_VOICEDB }}
  PABOLO_FUNCTIONS_REGION: ${{ vars.GCP_REGION }}
  PABOLO_BUCKET_PUBLIC_CDN: ${{ vars.BUCKET_PUBLIC_CDN }}

jobs:
  build-and-preview:
    if: "${{ github.event.pull_request.head.repo.full_name == github.repository }}"
    runs-on: ubuntu-latest
    environment: dev
    permissions:
      contents: read
      checks: write
      pull-requests: write
      id-token: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v4.1.0
        with:
          lfs: true
          # Check out the current branch instead of the default merge commit on pull_request event
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Set up Node.js
        uses: actions/setup-node@v4.0.1
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Install dependencies for firebase functions
        working-directory: functions
        run: npm ci

      - name: Install firebase tools
        run: npm install -g firebase-tools@13.0.3

      - name: Build app project
        run: npm run build:app

      - name: Build backoffice project
        run: npm run build:backoffice

      - name: Set env vars
        shell: bash
        run: |
          echo "GIT_SHA_SHORT=$(git rev-parse --short=7 HEAD)" >>$GITHUB_ENV

      - name: Interpolate Firebase Config
        run: |
          sudo apt-get install -y gettext-base
          envsubst < .firebaserc.ci | tee .firebaserc
          envsubst < firebase.json.ci | tee firebase.json

      # see e2e_tests.yml for the explanation of this step bypassing workload identity
      - name: Decode Google Cloud Service Account key
        env:
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
        run: |
          echo "$GCP_SA_KEY" | base64 -d > /tmp/creds.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=/tmp/creds.json" >>"$GITHUB_ENV"

      - name: Deploy Firebase only functions
        uses: nick-fields/retry@v3.0.0
        with:
          timeout_seconds: 300
          retry_wait_seconds: 15
          max_attempts: 5
          retry_on: error
          command: scripts/functions-deploy.sh

      # Except storage as deployed in e2etest
      # Except extensions as we cannot deploy `googlecloud/firestore-semantic-search` extension via CI
      - name: Deploy Firebase except functions, hosting and extensions
        run: firebase deploy --except functions,hosting,storage,extensions

      - run: |
          echo "SERVICE_ACCOUNT_KEY=$(cat $GOOGLE_APPLICATION_CREDENTIALS | tr -d '\n')" >> $GITHUB_ENV

      - uses: FirebaseExtended/action-hosting-deploy@v0.7.1
        with:
          channelId: "" # auto-generated per branch or PR
          firebaseServiceAccount: "${{ env.SERVICE_ACCOUNT_KEY }}"
          firebaseToolsVersion: 13.0.3
          projectId: "${{ env.GOOGLE_CLOUD_PROJECT }}"
          repoToken: "${{ secrets.GITHUB_TOKEN }}"
          expires: 7d
